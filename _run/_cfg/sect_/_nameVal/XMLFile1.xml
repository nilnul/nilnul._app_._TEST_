<?xml version="1.0" encoding="utf-8" ?>
<!--If you don't want to put too much data in your AppSettings section, you can group your related values into their own section as follows:-->

<configuration>
	<configSections>
		<section
		  name="MyDictionary"
		  type="System.Configuration.NameValueFileSectionHandler,System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
		<!-- blah blah the default stuff here -->

		<!-- here, add your custom section -->
		<section name="DocTabMap" type="System.Configuration.NameValueFileSectionHandler, System, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
	</configSections>

	<!-- your custom section, but referenced in another file -->
	<DocTabMap file="CustomDocTabs.config" />
	<!--This is an excellent point. One tweak, however, is instead of specifying the attribute "file" I could only get it to work with the attribute "configSource." e.g. <DocTabMap configSource="CustomDocTabs.config" />-->

	<!--Then, your CustomDocTabs.config looks like this:

	<?xml version="1.0"?>
	<DocTabMap>
		<add key="A" value="1" />
		<add key="B" value="2" />
		<add key="C" value="3" />
		<add key="D" value="4" />
	</DocTabMap>-->


	<!-- etc, remainder of default web.config is here -->

	<MyDictionary>
		<add key="name1" value="value1" />
		<add key="name2" value="value2" />
		<add key="name3" value="value3" />
		<add key="name4" value="value4" />
	</MyDictionary>
</configuration>

<!--You can access elements in this collection using

using System.Collections.Specialized;
using System.Configuration;

public string GetName1()
{
NameValueCollection section =
(NameValueCollection)ConfigurationManager.GetSection("MyDictionary");
return section["name1"];
}-->
